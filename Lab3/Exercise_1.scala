//A) Estimate value of PI using MC method.
//For that one needs to generate many pairs of random numbers* in the range [0,1].
//For each pair one needs to check if distance from (0,0) is smaller or greater than 1.
//Then count the number of such pairs and number of all pairs.
//(There is convenient function called hypot to calculate the hypotenous).
//The value of PI is equal 4 x N_in_circle / N.
//https://www.geeksforgeeks.org/estimating-value-pi-using-monte-carlo/

//B) estimate in the same way value of any integral ( say y = 1 + x*x ) in the range of (0, 1)
//This can be done as follows:
//  * obtain M numbers in the box x in (0, 1), y in (0, 10) (as above) and count the pairs when y < f(x) (N)
//  * the integral would be equal to 10* N / M  (10 is there because the area of of the box is 10)
//* randoms can be generated by: import math._ and the in the code just call random() or just math.random()
//The solution with the generator will be graded 6 points.

import scala.util.Random

object Exercise_1 {
  def main(args: Array[String]): Unit={
    val N = math.pow(10, 7).toInt
    val M = math.pow(10, 6).toInt

    print(estimateIntegral(M))
  }

  def generatePoint() : Array[Double] = {
    val generator = new Random()
    val point = for(_ <- 0 until 2) yield generator.nextDouble()
    point.toArray
  }

  def generateSequence(n : Int): Array[Array[Double]] = {
    val sequence = for(_ <- 0 until n) yield generatePoint()
    sequence.toArray
  }

  def check(arr: Array[Double]): Boolean = {
    if (math.hypot(arr(0), arr(1)) < 1.0) true
    else false
  }

  def N_in_circle(arr: Array[Array[Double]]): Double = {
    arr.count(check)
  }

  def estimatePi(n: Int) : Double = {
    4.0 * N_in_circle(generateSequence(n)) / n
  }

  def check_integral(arr: Array[Double]): Boolean = {
    if(arr(1)< 1 + arr(0) * arr(0)) true
    else false
  }

  def N_in_Integral(arr: Array[Array[Double]]): Double = {
    arr.count(check_integral)
  }

  def estimateIntegral(n: Int) : Double = {
    10.0 * N_in_Integral(generateSequence(n)) / n
  }
}
